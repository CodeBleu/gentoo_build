---
# tasks file for gentoo_build
- block:
  - name: Get gpg password from Passwordstore
    set_fact:
      gpg_pass: "{{ lookup('passwordstore', 'personal/gpg') }}"
    no_log: true

  - name: Creating a New GPT Partition on the PC's Main Drive
    parted:
      device: "{{ livecd_primary_disk }}"
      number: 1
      label: gpt
      flags: [lvm]
      state: present

  - name: Check if GPG Agent is running
    shell: ps -aux | grep -i [a]gent | awk '{print $NF}'|tr -d "-"
    register: gpg_check

  - name: Start GPG Agent
    command: /usr/bin/gpg-agent --daemon
    when: "not 'daemon' in gpg_check.stdout_lines"

  - name: Reset GPG Agent cache
    shell: echo RELOADAGENT | gpg-connect-agent

  - name: Check if disk has been formated with LUKS
    command: cryptsetup isLuks {{ livecd_primary_disk }}1
    register: luks_info
    failed_when: luks_info.rc > 1

  - name: Formatting the New Partition with LUKS
    shell: echo -n '{{ gpg_pass }}' | gpg -d -q --pinentry-mode loopback \
      --passphrase-fd 0 \
      --no-tty --yes {{ livecd_usb_luks_key }} | \
      cryptsetup \
      --cipher {{ livecd_cryptsetup_cipher }} \
      --key-size {{ livecd_cryptsetup_key_size }} \
      --hash {{ livecd_cryptsetup_hash }} \
      --key-file - luksFormat {{ livecd_primary_disk }}1
    args:
      executable: /bin/bash
      stdin_add_newline: false
    no_log: true
    when: luks_info.rc == 1
    register: luks_formated

  - name: Check if LUKS Slot 1 ( Optional passphrase ) exists
    shell: cryptsetup luksDump {{ livecd_primary_disk }}1 \
      | grep "Slot 1" | cut -d " " -f4
    register: optional_slot_1

  - name: Adding a Fallback Passphrase (Optional Step)
    shell: "echo -n '{{ gpg_pass }}' | gpg -d -q --pinentry-mode loopback \
      --passphrase-fd 0 \
      --no-tty --yes {{ livecd_usb_luks_key }} | \
      cryptsetup \
      --key-file - \
      luksAddKey {{ livecd_primary_disk }}1 <(echo -n '{{ gpg_pass }}')"
    args:
      executable: /bin/bash
    no_log: true
    when:
      - luks_formated is defined
      - livecd_luks_optional is defined
      - optional_slot_1.stdout == 'DISABLED'

  - name: Check if LUKS vol {{ livecd_luks_vol }} exists
    shell: cryptsetup status {{ livecd_luks_vol }} \
      | grep "active" | cut -d " " -f3 | tr -d "."
    register: luks_status

  - name: Open LUKS Volume
    shell: "echo -n '{{ gpg_pass }}' | gpg -d -q --pinentry-mode loopback \
      --passphrase-fd 0 \
      --no-tty --yes {{ livecd_usb_luks_key }} | \
      cryptsetup \
      --key-file - \
      luksOpen {{ livecd_primary_disk }}1 \
      {{ livecd_luks_discards }} {{ livecd_luks_vol }}"
    args:
      executable: /bin/bash
    no_log: true
    when:
      - luks_formated is defined
      - not luks_status.stdout == 'active'
    register: luks_opened

  - name: Wait for LUKS Volume to open
    wait_for:
      timeout: 3

  - name: Check if LUKS vol {{ livecd_luks_vol }} exists
    shell: cryptsetup status {{ livecd_luks_vol }} \
      | grep "active" | cut -d " " -f3 | tr -d "."
    register: luks_status

  - name: Create {{ livecd_lvm_vg }}
    lvg:
      vg: "{{ livecd_lvm_vg }}"
      pvs: "{{ livecd_lvm_pv }}"
    when:
      - luks_formated is defined
      - luks_opened is defined
      - luks_status.stdout == 'active'
    register: vg_created

  - name: Setup LVM LVs
    lvol:
      vg: "{{ livecd_lvm_vg }}"
      lv: "{{ item.key }}"
      size: "{{ item.value.size }}"
    loop: "{{ lookup('dict', livecd_lvm_lvs['lv']) }}"
    when:
      - vg_created is defined

  - name: Create filesystems
    filesystem:
      fstype: "{{ livecd_filesystem_type }}"
      dev: /dev/mapper/{{ livecd_lvm_vg }}-{{ item.key }}
    loop: "{{ lookup('dict', livecd_lvm_lvs['lv']) }}"
    when:
      - not item.key == "swap"

  - name: Create SWAP filesystem
    filesystem:
      fstype: swap
      dev: /dev/mapper/{{ livecd_lvm_vg }}-swap

  - name: Check if SWAP is active
    command: swapon -s /dev/mapper/{{ livecd_lvm_vg }}-swap
    changed_when: false
    register: swap_status

  - name: Enable SWAP
    command: swapon /dev/mapper/{{ livecd_lvm_vg }}-swap
    changed_when: false
    when: "not swap_status.stdout_lines"

  - name: Create Folders to mount
    file:
      path: /mnt/gentoo/{{ item.key }}
      state: directory
      mode: 0755
    loop: "{{ lookup('dict', livecd_lvm_lvs['lv']) }}"
    when:
      - not item.key == "swap"
      - not item.key == "root"

  - name: Mount root filesystem
    mount:
      path: /mnt/gentoo
      src: /dev/mapper/{{ livecd_lvm_vg }}-root
      state: mounted
      fstype: xfs

  - name: Create BOOT folders
    file:
      path: /mnt/gentoo/boot/efi
      state: directory
      mode: 0755

  - name: Mount non-root/swap filesystems
    mount:
      path: /mnt/gentoo/{{ item.key }}
      src: /dev/mapper/{{ livecd_lvm_vg }}-{{ item.key }}
      state: mounted
      fstype: xfs
    loop: "{{ lookup('dict', livecd_lvm_lvs['lv']) }}"
    when:
      - not item.key == "swap"
      - not item.key == "root"

  - name: Get PARTUUID
    shell: blkid  {{ item }}1 \
      | grep -ioP 'partuuid=\"\K([\w\d-]+)'
    register: partuuid_stats
    with_items:
      - "{{ livecd_primary_disk }}"
      - "{{ livecd_boot_efi_usb }}"
    changed_when: false
    ignore_errors: true

  - name: Set Facts for PARTUUID  # noqa var-naming
    set_fact:
      livecd_{{ item.item.split('/')[2] }}_partuuid: "{{ item.stdout }}"
    with_items:
      - "{{ partuuid_stats.results }}"

  - name: debug
    debug:
      msg: "{{ livecd_sda_partuuid }}"

  - name: Downloading, Verifying and Unpacking the Gentoo Stage 3 Tarball
    get_url:
      url: "{{ livecd_stage3_url }}/{{ livecd_stage3_date }}/{{ item }}"
      dest: /mnt/gentoo/{{ item }}
    with_items:
      - stage3-amd64-openrc-{{ livecd_stage3_date }}.tar.xz.DIGESTS
      - stage3-amd64-openrc-{{ livecd_stage3_date }}.tar.xz.DIGESTS.asc
      - stage3-amd64-openrc-{{ livecd_stage3_date }}.tar.xz.CONTENTS.gz
      - stage3-amd64-openrc-{{ livecd_stage3_date }}.tar.xz
    register: download_stuff
    loop_control:
      pause: 10
    tags: download_stage3

  # https://www.gentoo.org/downloads/signatures/
  - name: Install Gentoo weekly release public key
    command: gpg --keyserver hkps://keys.gentoo.org \
      --recv-key 2D182910
    register: install_gentoo_release_key
    changed_when: "'imported' in install_gentoo_release_key.stderr"
    tags: verify_digest

  - name: Get full key fingerprint
    shell: gpg -k | grep -a1 pub | grep -vP "\-|pub" | tr -d " "
    register: release_fingerprint_stat
    changed_when: false
    tags: verify_digest

  - name: Verify DIGESTS.asc file
    shell: 'gpg --verify /mnt/gentoo/stage3-amd64-openrc-{{
      livecd_stage3_date }}.tar.xz.DIGESTS.asc 2>&1 >/dev/null |
      grep -iP "good"'
    when:
      - release_fingerprint_stat.stdout == livecd_release_fingerprint
    register: verify_digest
    failed_when: "not 'Good signature' in verify_digest.stdout"
    changed_when: "not 'Good signature' in verify_digest.stdout"
    tags: verify_digest

  - name: debug - digeset asc
    debug:
      msg: "{{ verify_digest }}"
    tags: verify_digest

  - name: Verify Digests on all files
    shell: 'cd /mnt/gentoo/; awk "/SHA512 HASH/{getline;print}" \
           stage3-amd64-*.tar.xz.DIGESTS.asc | sha512sum --check'
    when: verify_digest is defined
    changed_when: false
    register: all_digests
    tags: verify_digest
    ignore_errors: true

  - name: debug - all asc
    debug:
      msg: "{{ all_digests }}"
    tags: verify_digest

  - name: check if stage3 has been unpacked
    stat:
      path: /var/db/pkg
    register: var_db_pkg
    tags: unpack_stage3

  - name: Unpack Stage3 tarball  # noqa command-instead-of-module
    command: "tar xvJpf /mnt/gentoo/\
              stage3-amd64-openrc-{{ livecd_stage3_date }}.tar.xz \
              -C /mnt/gentoo \
              --xattrs-include='*.*' --numeric-owner"
    args:
      warn: false
    register: unpack_stage3
    when:
      - all_digests.rc|int == 0
      - not var_db_pkg.stat.isdir
    tags: ["verify_digest", "unpack_stage3"]

  - name: Copy .bashrc file
    copy:
      src: .bashrc
      dest: /mnt/gentoo/root/
      owner: root
      group: root
      mode: '0644'
    tags: copy_files

  - name: Copy .bashrc_profile
    copy:
      src: /mnt/gentoo/etc/skel/.bash_profile
      dest: /mnt/gentoo/root/
      owner: root
      group: root
      mode: '0644'
      remote_src: true
    tags: copy_files

  - name: Slurp make.conf
    slurp:
      src: /mnt/gentoo/etc/portage/make.conf
    register: slurp_make_conf
    tags: copy_files

  - name: Create make.conf file
    template:
      src: make.conf.j2
      dest: /mnt/gentoo/etc/portage/make.conf
      owner: root
      group: root
      mode: '0644'
    when: "not 'GENTOO_MIRRORS' in slurp_make_conf['content'] | b64decode"
    tags: copy_files

  - name: Setting up mirrorselect
    shell: >
      mirrorselect -s 3 -c "USA" -R "North America" -b 10 -D -o
      >> /mnt/gentoo/etc/portage/make.conf
    register: mirrors
    when: "not 'GENTOO_MIRRORS' in slurp_make_conf['content'] | b64decode"
    tags: copy_files

  - name: Portage Ver. needs to be > 2.3.42
    shell: >
      ls -d /mnt/gentoo/var/db/pkg/sys-apps/portage-* |
      cut -d "/" -f8 | cut -d "-" -f2 | cut -d "." -f1,2
    register: portage_version
    changed_when: false
    failed_when: portage_version.stdout|float <= 2.3
    tags: copy_files

  - name: Create repos.conf directory
    file:
      path: /mnt/gentoo/etc/portage/repos.conf
      state: directory
      mode: '0755'
    tags: copy_files

  - name: Copy gentoo.conf file (websync)
    copy:
      src: gentoo.conf
      dest: /mnt/gentoo/etc/portage/repos.conf/
      mode: 0644
    tags: copy_files

  - name: Copy gentoo.conf file (git)
    copy:
      src: gentoo-git.conf
      dest: /mnt/gentoo/
      mode: 0644
    tags: copy_files

  - name: Copy /etc files
    copy:
      src: "{{ item }}"
      dest: /mnt/gentoo/etc/
      mode: 0644
      remote_src: true
    with_items:
      - "/etc/resolv.conf"
      - "/etc/wpa_supplicant/wpa_supplicant.conf"
    tags: copy_files

  - name: Mounts prep for (chroot) - proc
    mount:
      path: /mnt/gentoo/proc
      src: /proc
      fstype: proc
      state: mounted
    tags: mount_chroot

  - name: Mounts prep for (chroot) - dev,sys
    mount:
      path: /mnt/gentoo/{{ item }}
      src: /{{ item }}
      opts: rbind,make-rslave
      fstype: none
      state: mounted
    with_items:
      - sys
      - dev
    tags: mount_chroot

  - name: setup ssh for (chroot)
    blockinfile:
      path: /etc/ssh/sshd_config
      block: |
        Match User root
            ChrootDirectory /mnt/gentoo
        Match all
    register: ssh_chroot
    notify: restart ssh
    tags: chroot

  - name: Fix folders for (chroot)
    file:
      path: "{{ item }}"
      state: directory
      mode: '0755'
    with_items:
      - /
      - /mnt
      - /mnt/gentoo
    tags: chroot

  - name: Flush Handlers
    meta: flush_handlers
    tags: chroot

  - name: Reset ssh connection
    meta: reset_connection
    tags: chroot

  - name: Wait 300 seconds for port 22 to become open and contain "OpenSSH"
    wait_for:
      port: 22
      host: '{{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}'
      search_regex: OpenSSH
      delay: 10
    tags: chroot

  - name: Install misc packages
    package:
      name: "{{ item }}"
      state: present
    with_items:
      - vim
      - curl
      - tmux
    tags: packages

  - name: check if .git exists in repo path
    stat:
      path: /var/db/repos/gentoo/.git
    register: git_repo
    tags: portage

  - name: install a Portage (repository tree) snapshot
    command: "emaint sync --auto"
    register: portage_snapshot
    when: not git_repo.stat.isdir
    tags: portage

  # gentoolkit needed for ansible package manager to work
  - name: Install gentoolkit
    command: emerge gentoolkit
    changed_when: false
    tags: portage

  - name: Install Git
    package:
      name: dev-vcs/git
      state: installed
    when: not git_repo.stat.isdir
    tags: portage

  - name: Replace gentoo.conf file (git)
    copy:
      src: gentoo-git.conf
      dest: /etc/portage/repos.conf/gentoo.conf
      mode: 0644
    when: not git_repo.stat.isdir
    tags: portage

  - name: Clean repo for Git usage
    file:
      path: /var/db/repos/gentoo
      state: absent
    when: not git_repo.stat.isdir
    tags: portage

  - name: Update emaint sync after switch to Git
    command: "emaint sync --auto"
    register: portage_snapshot
    when: not git_repo.stat.isdir
    tags: portage

  - name: Update Portage
    package:
      name: portage
      oneshot: true
      state: latest
    tags: portage

  - name: Sync and Update @world
    portage:
      package: '@world'
      update: "true"
      deep: "true"
      newuse: "true"
      sync: "yes"
    tags: portage,update_world

  - name: Remove unneeded packages
    portage:
      depclean: true
    tags: portage,update_world

  - name: Setup Timezone
    template:
      src: timezone.j2
      dest: /etc/timezone
      owner: root
      group: root
      mode: '0644'
    tags: time_locale

  - name: Reconfigure Timezone-data package
    command: emerge --config sys-libs/timezone-data
    changed_when: false
    tags: time_locale

  - name: Append locale info
    lineinfile:
      path: /etc/locale.gen
      line: "{{ item }}"
      create: true
      mode: 0644
    with_items:
      - en_US ISO-8859-1
      - en_US.UTF-8 UTF-8
    tags: time_locale

  - name: Initially set locale to "C"
    command: eselect locale set "C"
    changed_when: false
    tags: time_locale

  - name: Reset ssh connection
    meta: reset_connection
    tags: time_locale

  - name: Install cpuid2cpuflags
    package:
      name: app-portage/cpuid2cpuflags
      oneshot: true
      state: present
    tags: cpu

  - name: Run cpuid2cpuflags
    command: cpuid2cpuflags
    changed_when: false
    register: cpuid
    tags: cpu

  - name: Append cpu flags to make.conf
    replace:
      path: /etc/portage/make.conf
      regexp: '^CPU_FLAGS_X86.*$'
      replace: "CPU_FLAGS_X86=\"{{ cpuid.stdout.split(':')[1] }}\""
    tags: cpu

  - name: Select Desktop Profile
    command: eselect profile set "default/linux/amd64/17.1/desktop"
    changed_when: false
    tags: profile

  - name: Sync and Update @world
    portage:
      package: '@world'
      update: "true"
      deep: "true"
      newuse: "true"
      sync: "yes"
    tags: profile

  - name: Test eselect in (chroot)
    command: eselect news list
    register: eselect_test
    changed_when: false
    tags: portage

  - name: debug - eselect test
    debug:
      msg: "{{ eselect_test }}"
    tags: portage
